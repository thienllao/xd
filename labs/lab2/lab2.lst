     1                                      %include "../lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти
    56 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расширяем до слова
    59 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                     section .data                         ; сегмент инициализированных переменных
     3 00000000 496E70757420623A0A                  InBMsg db "Input b:",10
     4                                              lenInBMsg equ $-InBMsg
     5                                  
     6 00000009 496E70757420633A0A                  InCMsg db "Input c:",10
     7                                              lenInCMsg equ $-InCMsg
     8                                  
     9 00000012 496E70757420643A0A                  InDMsg db "Input d:",10
    10                                              lenInDMsg equ $-InDMsg
    11                                  
    12 0000001B 416E737765723A0A                    OutMsg db "Answer:",10
    13                                              lenOutMsg equ $-OutMsg
    14                                  
    15                                  
    16                                     section .bss                          ; сегмент неинициализированных переменных
    17 00000000 <res Ah>                            InBuf   resb    10            ; буфер для вводимой строки
    18                                              lenIn   equ     $-InBuf
    19                                  
    20 0000000A ????????                            b resd 1
    21 0000000E ????????                            c resd 1
    22 00000012 ????????                            d resd 1
    23                                  
    24 00000016 ????????                            a resd 1
    25                                  
    26                                          section .text         ; сегмент кода
    27                                          global  _start
    28                                  _start:
    29                                  
    30                                          ; вывод сообщения для ввода b
    31 000000A9 B801000000                      mov     rax, 1        ; системная функция 1 (write)
    32 000000AE BF01000000                      mov     rdi, 1        ; дескриптор файла stdout=1
    33 000000B3 48BE-                           mov     rsi, InBMsg  ; адрес выводимой строки
    33 000000B5 [0000000000000000] 
    34 000000BD BA09000000                      mov     rdx, lenInBMsg  ; длина строки
    35 000000C2 0F05                            syscall               ; вызов системной функции
    36                                  
    37                                          ; считывание переменной
    38 000000C4 B800000000                      mov     rax, 0        ; системная функция 0 (read)
    39 000000C9 BF00000000                      mov     rdi, 0        ; дескриптор файла stdin=0
    40 000000CE 48BE-                           mov     rsi, InBuf    ; адрес вводимой строки
    40 000000D0 [0000000000000000] 
    41 000000D8 BA0A000000                      mov     rdx, lenIn    ; длина строки
    42 000000DD 0F05                            syscall               ; вызов системной функции
    43                                  
    44                                          ; конвертация в int
    45 000000DF 48BE-                           mov     rsi, InBuf
    45 000000E1 [0000000000000000] 
    46 000000E9 E864FFFFFF                      call StrToInt64
    47 000000EE 48890425[0A000000]              mov     [b], rax
    48                                  
    49                                          ; вывод сообщения для ввода с
    50 000000F6 B801000000                      mov     rax, 1
    51 000000FB BF01000000                      mov     rdi, 1
    52 00000100 48BE-                           mov     rsi, InCMsg
    52 00000102 [0900000000000000] 
    53 0000010A BA09000000                      mov     rdx, lenInCMsg
    54 0000010F 0F05                            syscall
    55                                  
    56                                          ; считывание переменной
    57 00000111 B800000000                      mov     rax, 0
    58 00000116 BF00000000                      mov     rdi, 0
    59 0000011B 48BE-                           mov     rsi, InBuf
    59 0000011D [0000000000000000] 
    60 00000125 BA0A000000                      mov     rdx, lenIn
    61 0000012A 0F05                            syscall
    62                                  
    63                                          ;конвертация в int
    64 0000012C 48BE-                           mov     rsi, InBuf
    64 0000012E [0000000000000000] 
    65 00000136 E817FFFFFF                      call StrToInt64
    66 0000013B 48890425[0E000000]              mov     [c], rax
    67                                  
    68                                          ;вывод сообщения для ввода d
    69 00000143 B801000000                      mov     rax, 1
    70 00000148 BF01000000                      mov     rdi, 1
    71 0000014D 48BE-                           mov     rsi, InDMsg
    71 0000014F [1200000000000000] 
    72 00000157 BA09000000                      mov     rdx, lenInDMsg
    73 0000015C 0F05                            syscall
    74                                  
    75                                          ;считывание переменной
    76 0000015E B800000000                      mov     rax, 0
    77 00000163 BF00000000                      mov     rdi, 0
    78 00000168 48BE-                           mov     rsi, InBuf
    78 0000016A [0000000000000000] 
    79 00000172 BA0A000000                      mov     rdx, lenIn
    80 00000177 0F05                            syscall
    81                                  
    82                                          ;конвертация в int
    83 00000179 48BE-                           mov     rsi, InBuf
    83 0000017B [0000000000000000] 
    84 00000183 E8CAFEFFFF                      call StrToInt64
    85 00000188 48890425[12000000]              mov     [d],rax
    86                                  
    87                                  
    88                                          ;вычисление выражения a = ( b + ( c - 5 ) * d ) / ( b * b + 1 )
    89                                  
    90 00000190 8B0425[0E000000]                mov eax, [c]
    91 00000197 83E805                          sub eax, 5     ; c - 5
    92 0000019A F72C25[12000000]               imul dword[d]   ; (c-5)*d
    93 000001A1 2B0425[0A000000]               sub eax, [b]     ; b + (c-5)*d
    94 000001A8 89C3                           mov ebx, eax       ; v ebx chislitel
    95                                  
    96 000001AA 8B0425[0A000000]               mov eax, [b]
    97 000001B1 F72C25[0A000000]                imul dword[b]  ; b * b
    98 000001B8 FFC0                            inc eax        ; b * b + 1
    99                                  
   100 000001BA 89C1                           mov ecx, eax
   101 000001BC 89D8                            mov eax, ebx
   102 000001BE 99                              cdq
   103 000001BF F7F9                            idiv ecx     ; результат в eax
   104 000001C1 890425[16000000]               mov [a], eax
   105                                  
   106                                  
   107                                          ;write answer
   108 000001C8 B801000000                      mov rax, 1
   109 000001CD BF01000000                      mov rdi, 1
   110 000001D2 48BE-                           mov rsi, OutMsg
   110 000001D4 [1B00000000000000] 
   111 000001DC BA08000000                      mov rdx, lenOutMsg
   112 000001E1 0F05                            syscall
   113                                  
   114                                          ; конвертация в str
   115 000001E3 488B0425[16000000]              mov rax, [a]
   116 000001EB 48BE-                           mov rsi, InBuf
   116 000001ED [0000000000000000] 
   117 000001F5 E806FEFFFF                      call IntToStr64
   118 000001FA 4889C2                          mov rdx,rax
   119                                  
   120                                  
   121 000001FD B801000000                      mov rax, 1
   122 00000202 BF01000000                      mov rdi, 1
   123 00000207 48BE-                           mov rsi, InBuf
   123 00000209 [0000000000000000] 
   124 00000211 4889D2                          mov rdx, rdx
   125 00000214 0F05                            syscall
   126                                  
   127                                  
   128                                          ; exit
   129 00000216 B83C000000                      mov     rax, 60       ; системная функция 60 (exit)
   130 0000021B 4831FF                          xor     rdi, rdi      ; return code 0
   131 0000021E 0F05                            syscall               ; вызов системной функции
