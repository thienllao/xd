     1                                          %include "../lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти
    56 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расширяем до слова
    59 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                        section .data              ; сегмент инициализированных переменных
     3 00000000 496E70757420613A0A      InAMsg db "Input a:",10  ; выводимое сообщение
     4                                  lenInAMsg equ $-InAMsg
     5                                  
     6 00000009 496E70757420623A0A      InBMsg db "Input b:",10
     7                                  lenInBMsg equ $-InBMsg
     8                                  
     9 00000012 496E707574206B2028-     InKMsg db "Input k (not zero):",10
     9 0000001B 6E6F74207A65726F29-
     9 00000024 3A0A               
    10                                  lenInKMsg equ $-InKMsg
    11                                  
    12 00000026 526573756C7420663D-     OutMsg db "Result f=",10
    12 0000002F 0A                 
    13                                  lenOutMsg equ $-OutMsg
    14                                  
    15                                     section .bss               ; сегмент неинициализированных переменных
    16 00000000 <res Ah>                InBuf   resb    10            ; буфер для вводимой строки
    17                                  lenIn   equ     $-InBuf
    18                                  
    19 0000000A ????????                a resd 1
    20 0000000E ????????                b resd 1
    21 00000012 ????????                k resd 1
    22 00000016 ????????                f resd 1
    23                                  
    24                                          section .text         ; сегмент кода
    25                                          global  _start
    26                                  _start:
    27                                      ; вывод сообщения для ввода k
    28 000000A9 B801000000                      mov     rax, 1        ; системная функция 1 (write)
    29 000000AE BF01000000                      mov     rdi, 1        ; дескриптор файла stdout=1
    30 000000B3 48BE-                           mov     rsi, InKMsg  ; адрес выводимой строки
    30 000000B5 [1200000000000000] 
    31 000000BD BA14000000                      mov     rdx, lenInKMsg  ; длина строки
    32 000000C2 0F05                            syscall               ; вызов системной функции
    33                                  
    34                                          ; считывание переменной
    35 000000C4 B800000000                      mov     rax, 0        ; системная функция 0 (read)
    36 000000C9 BF00000000                      mov     rdi, 0        ; дескриптор файла stdin=0
    37 000000CE 48BE-                           mov     rsi, InBuf    ; адрес вводимой строки
    37 000000D0 [0000000000000000] 
    38 000000D8 BA0A000000                      mov     rdx, lenIn    ; длина строки
    39 000000DD 0F05                            syscall               ; вызов системной функции
    40                                  
    41                                          ; конвертация в int
    42 000000DF 48BE-                           mov     rsi, InBuf
    42 000000E1 [0000000000000000] 
    43 000000E9 E864FFFFFF                      call StrToInt64
    44 000000EE 48890425[12000000]              mov     [k], rax
    45                                  
    46 000000F6 833C25[12000000]00              cmp dword[k], 0            ; если равно нулю, то ввод заново k
    47 000000FE 74A9                            je _start            ; если не равно нулю, то идем дальше
    48                                  
    49                                         ; вывод сообщения для ввода А
    50 00000100 B801000000                      mov rax, 1
    51 00000105 BF01000000                      mov rdi, 1
    52 0000010A 48BE-                           mov rsi, InAMsg
    52 0000010C [0000000000000000] 
    53 00000114 BA09000000                      mov rdx, lenInAMsg
    54 00000119 0F05                            syscall
    55                                  
    56                                          ;считывание переменной
    57                                  
    58 0000011B B800000000                      mov     rax, 0        ; системная функция 0 (read)
    59 00000120 BF00000000                      mov     rdi, 0        ; дескриптор файла stdin=0
    60 00000125 48BE-                           mov     rsi, InBuf    ; адрес вводимой строки
    60 00000127 [0000000000000000] 
    61 0000012F BA0A000000                      mov     rdx, lenIn    ; длина строки
    62 00000134 0F05                            syscall               ; вызов системной функции
    63                                  
    64                                         ;конвертация в Int
    65 00000136 48BE-                           mov rsi, InBuf
    65 00000138 [0000000000000000] 
    66 00000140 E80DFFFFFF                      call StrToInt64
    67 00000145 48890425[0A000000]              mov [a], rax
    68                                  
    69                                                ; вывод сообщения для ввода b
    70 0000014D B801000000                      mov rax, 1
    71 00000152 BF01000000                      mov rdi, 1
    72 00000157 48BE-                           mov rsi, InBMsg
    72 00000159 [0900000000000000] 
    73 00000161 BA09000000                      mov rdx, lenInBMsg
    74 00000166 0F05                            syscall
    75                                  
    76                                          ;считывание переменной
    77                                  
    78 00000168 B800000000                      mov     rax, 0        ; системная функция 0 (read)
    79 0000016D BF00000000                      mov     rdi, 0        ; дескриптор файла stdin=0
    80 00000172 48BE-                           mov     rsi, InBuf    ; адрес вводимой строки
    80 00000174 [0000000000000000] 
    81 0000017C BA0A000000                      mov     rdx, lenIn    ; длина строки
    82 00000181 0F05                            syscall               ; вызов системной функции
    83                                  
    84                                         ;конвертация в Int
    85 00000183 48BE-                           mov rsi, InBuf
    85 00000185 [0000000000000000] 
    86 0000018D E8C0FEFFFF                      call StrToInt64
    87 00000192 48890425[0E000000]              mov [b], rax
    88                                  
    89                                  
    90                                          ; calculate
    91 0000019A 488B0425[0A000000]              mov      rax, [a]
    92 000001A2 48030425[0E000000]              add     rax, [b]   ; a + b в регистре eax
    93 000001AA 4883F800                        cmp     rax, 0
    94                                          ;mov [f], rax
    95 000001AE 7F20                            jg result
    96                                  
    97 000001B0 488B0425[0A000000]              mov rax , [a]
    98 000001B8 F72C25[0E000000]                imul dword[b]
    99 000001BF 99                              cdq
   100 000001C0 F73C25[12000000]                idiv dword[k]
   101 000001C7 890425[16000000]                mov [f], eax
   102 000001CE EB00                            jmp result
   103                                  
   104                                  result:
   105 000001D0 48890425[16000000]              mov [f], rax
   106                                  
   107 000001D8 B801000000                      mov rax, 1
   108 000001DD BF01000000                      mov rdi, 1
   109 000001E2 48BE-                           mov rsi, OutMsg
   109 000001E4 [2600000000000000] 
   110 000001EC BA0A000000                      mov rdx, lenOutMsg
   111 000001F1 0F05                            syscall
   112                                  
   113 000001F3 488B0425[16000000]              mov rax, [f]
   114 000001FB 48BE-                           mov rsi, InBuf
   114 000001FD [0000000000000000] 
   115 00000205 E8F6FDFFFF                      call IntToStr64
   116 0000020A 4889C2                          mov rdx,rax
   117                                          ;mov [f], rax
   118                                  
   119 0000020D B801000000                      mov rax, 1
   120 00000212 BF01000000                      mov rdi, 1
   121 00000217 48BE-                           mov rsi, InBuf;rsi
   121 00000219 [0000000000000000] 
   122 00000221 4889D2                          mov rdx, rdx
   123 00000224 0F05                            syscall
   124                                  
   125                                  ; двойной вывод мусора надо пофиксить
   126                                  
   127                                  
   128                                         ; exit
   129 00000226 B83C000000                      mov     rax, 60       ; системная функция 60 (exit)
   130 0000022B 4831FF                          xor     rdi, rdi      ; return code 0
   131 0000022E 0F05                            syscall               ; вызов системной функции
